import streamlit as st
import time
import threading
from streamlit import text_input
from predict import predict_export
import nltk

nltk.download('punkt')
nltk.download('punkt_tab')
nltk.download('stopwords')

# Page Title and Introduction
st.title("Computer-generated Reviews Detector")
intro = "This app will allow you to determine with 99% accuracy whether a given review was generated by a computer or left by a human. Just enter the review data in the field below!"
st.caption(intro)
st.caption("")

categories_dict = {
    "Kindle Store": "Kindle_Store_5",
    "Books": "Books_5",
    "Home and Kitchen": "Home_and_Kitchen_5",
    "Pet Supplies": "Pet_Supplies_5"}

# YOUR FUNCTION
def output(input_text, category, rate):
    # if "AI" in input_text or "computer" in input_text:
    #     time.sleep(60)
    #     return "state1"  # computer-generated
    # else:
    #     time.sleep(60)
    #     return "state2"  # human-written
    return predict_export(input_text, category, rate)

def update_progress_bar(progress_bar, total_time, update_interval=1):
    steps = total_time // update_interval
    for i in range(steps):
        time.sleep(update_interval)
        progress_bar.progress((i + 1) * 100 // steps)
    return 100

def reset():
    st.session_state["text"] = ""
    st.session_state["select_box"] = 1

text_input, rating = st.columns([4, 1])
text_input = st.text_area("Enter review text: ", "", key="text")
rating = st.selectbox("Enter rating:", options=[1, 2, 3, 4, 5], key="select_box")
category = st.selectbox("Enter category:", options=["Kindle Store", "Books", "Home and Kitchen", "Pet Supplies"], key="select_category")
st.button("Reset", on_click=reset)

st.markdown("""
    <style>
        .stButton button {
            width: 100%;
            display: block;
            margin: 0 auto;
            color: white;
            border-color: white;
            border-radius: 5px;
            padding: 8px 16px;
        }
        .stButton button:hover {
            color: #28a745;
            border-color: #28a745;
        }
    </style>
""", unsafe_allow_html=True)

st.caption("*Analyzing the review can take some time. Please be patient and wait for result.")

if st.button("Analyze Review!"):
    if text_input.strip():
        with st.spinner('Analyzing your review...'):
            # progress_bar = st.progress(0)  # Create a progress bar container

            # Start the function call and update progress in the background
            total_time = 60  # Total time in seconds (e.g., 1 minute)
            update_interval = 1  # Update every 1 second
            # This will show the progress bar while the function runs
            # rogress_thread = threading.Thread(target=update_progress_bar, args=(progress_bar, total_time, update_interval))
            # progress_thread.start()

            # Now call the output function and get the result
            result = output(text_input, categories_dict[category], int(rating))

            # Wait for the progress thread to finish (if it has not finished already)
            # progress_thread.join()
    else:
        result = "No input provided in the textbox!"
else:
    result = ""


print(result)
# Analysis Result
if result == "Human-created":  # Computer-generated
    st.markdown(
        f"""
        <div style="
            background-color: #ffcccc;
            color: #b30000;
            font-weight: bold;
            text-align: center;
            padding: 10px;
            border-radius: 5px;
        ">
        This review is generated by a computer
        </div>
        """, unsafe_allow_html=True
    )
elif result == "AI-created":  # Human-made
    st.markdown(
        f"""
        <div style="
            background-color: #ccffcc;
            color: #006600;
            font-weight: bold;
            text-align: center;
            padding: 10px;
            border-radius: 5px;
        ">
        This review is made by a human
        </div>
        """, unsafe_allow_html=True
    )
